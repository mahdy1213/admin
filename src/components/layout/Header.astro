---
import { Menu, X, Sun, Moon } from 'lucide-astro';
import data from '../../../data.json';
---

<header class="fixed top-0 left-0 right-0 z-40 border-b shadow-soft
  bg-white/92 dark:bg-black/60
  supports-[backdrop-filter]:bg-white/60 supports-[backdrop-filter]:backdrop-blur-xl
  border-primary-200 dark:border-primary-700/40
">
  <nav class="container-width" aria-label="Main navigation">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Name -->
      <a href="/" class="font-extrabold text-xl gradient-text hover:scale-105 transition-transform duration-300 focus-ring rounded-md px-2 py-1">
        {data.name}
      </a>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        <a href="#about" class="nav-link focus-ring">About</a>
        <a href="#experience" class="nav-link focus-ring">Experience</a>
        <a href="#projects" class="nav-link focus-ring">Projects</a>
        <a href="#skills" class="nav-link focus-ring">Skills</a>
        <a href="#education" class="nav-link focus-ring">Education</a>
        <a href="#contact" class="nav-link focus-ring">Contact</a>
        
        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg hover:bg-white/20 dark:hover:bg-primary-700/50 focus-ring backdrop-blur-sm border border-transparent hover:border-white/20 transition-all duration-300 hover:scale-110"
          aria-label="Toggle dark mode"
        >
          <Sun class="w-5 h-5 dark:hidden text-brand-600" />
          <Moon class="w-5 h-5 hidden dark:block text-brand-400" />
        </button>
      </div>
      
      <!-- Mobile Menu Button -->
      <div class="md:hidden flex items-center space-x-2">
        <!-- Mobile Theme Toggle -->
        <button
          id="mobile-theme-toggle"
          class="p-2 rounded-lg hover:bg-white/20 dark:hover:bg-primary-700/50 focus-ring backdrop-blur-sm border border-transparent hover:border-white/20 transition-all duration-300 hover:scale-110"
          aria-label="Toggle dark mode"
        >
          <Sun class="w-5 h-5 dark:hidden text-brand-600" />
          <Moon class="w-5 h-5 hidden dark:block text-brand-400" />
        </button>
        
        <button
          id="mobile-menu-button"
          class="p-2 rounded-lg hover:bg-white/20 dark:hover:bg-primary-700/50 focus-ring backdrop-blur-sm border border-transparent hover:border-white/20 transition-all duration-300 hover:scale-110"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <Menu class="w-6 h-6 text-brand-600 dark:text-brand-400" id="menu-open" />
          <X class="w-6 h-6 hidden text-brand-600 dark:text-brand-400" id="menu-close" />
        </button>
      </div>
    </div>
    
    <!-- Mobile Navigation -->
    <div
      id="mobile-menu"
      class="md:hidden hidden absolute top-16 left-0 right-0 bg-white/90 dark:bg-primary-900/90 backdrop-blur-xl border-b border-white/20 dark:border-primary-700/50 shadow-medium"
    >
      <div class="px-4 py-4 space-y-4">
        <a href="#about" class="block nav-link focus-ring text-lg">About</a>
        <a href="#experience" class="block nav-link focus-ring text-lg">Experience</a>
        <a href="#projects" class="block nav-link focus-ring text-lg">Projects</a>
        <a href="#skills" class="block nav-link focus-ring text-lg">Skills</a>
        <a href="#education" class="block nav-link focus-ring text-lg">Education</a>
        <a href="#contact" class="block nav-link focus-ring text-lg">Contact</a>
      </div>
    </div>
  </nav>
</header>

<style>
  .nav-link {
    @apply text-primary-600 hover:text-brand-600 dark:text-primary-300 dark:hover:text-brand-400;
    @apply font-medium transition-all duration-300 rounded px-2 py-1;
    @apply relative overflow-hidden;
  }
  
  .nav-link::before {
    content: '';
    @apply absolute bottom-0 left-0 w-0 h-0.5 bg-brand-gradient transition-all duration-300;
  }
  
  .nav-link:hover::before,
  .nav-link.active::before {
    @apply w-full;
  }
  
  .nav-link.active {
    @apply text-brand-600 dark:text-brand-400;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpen = document.getElementById('menu-open');
    const menuClose = document.getElementById('menu-close');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
    const html = document.documentElement;
    
    // Mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        
        mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
        mobileMenu.classList.toggle('hidden');
        menuOpen?.classList.toggle('hidden');
        menuClose?.classList.toggle('hidden');
      });
      
      // Close mobile menu when clicking on links
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          menuOpen?.classList.remove('hidden');
          menuClose?.classList.add('hidden');
        });
      });
    }
    
    // Mobile theme toggle
    if (mobileThemeToggle) {
      mobileThemeToggle.addEventListener('click', () => {
        if (html.classList.contains('dark')) {
          html.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          html.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
      });
    }
    
    // Active link highlighting based on scroll position
    const navLinks = document.querySelectorAll('.nav-link[href^="#"]');
    const sections = document.querySelectorAll('section[id]');
    
    function updateActiveLink() {
      let current = '';
      const scrollPosition = window.scrollY + 100;
      
      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          current = section.getAttribute('id');
        }
      });
      
      navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === `#${current}`) {
          link.classList.add('active');
        }
      });
    }
    
    window.addEventListener('scroll', updateActiveLink);
    updateActiveLink(); // Initial call
  });
</script>
